toRemove[toRemove ==max(toRemove)]
sample(toRemove[toRemove == max(toRemove)], 1)
sample(names(toRemove[toRemove == max(toRemove)]), 1)
toAdd
sample(names(toRemove[toRemove == max(toRemove)]), 1)
toAdd[isTRUE(toAdd)]
toAdd[toAdd == TRUE]
req[req == TRUE]
req
req
toRemove
toRemove[toRemove == max(toRemove)]
toRemove[toRemove == 1]
sample(names(toRemove[toRemove == max(toRemove)]), 1)
?add
add
toAdd
toAdd[toAdd == TRUE]
toAdd[toAdd == FALSE]
method <- balanced
method <- "balanced"
if (method == "balanced") {
while (m > 0 & length(childrenCount[childrenCount > m_i]) <= m) {
child <- names(childrenCount[childrenCount > m_i])
m_i[child] <- m_i[child] + 1
m <- m - length(child)
}
child <- sample(names(childrenCount[childrenCount > m_i]), m)
m_i[child] <- m_i[child] + 1
# m <- 0
} else if (method == "randomized") {
# If we don't have the m fully distributed over m_i (children),
# choose a random child from childrenCount that still has taxa
# available to choose.
while (m > 0 & length(childrenCount[childrenCount > m_i]) > 0) {
child <- sample(names(childrenCount[childrenCount > m_i]), 1)
m_i[child] <- m_i[child] + 1
m <- m - 1
}
}
taxon
m <- 10
if (m <= 0) {
Print("Error: m less or equal than zero during recursion.\n")
exit(0)
}
# First step: Find the sub-taxa (children nodes) of the current taxon
taxon <- as.integer(taxon)
children <- nodes$id[nodes$parent == taxon & nodes$id != taxon]
children <- intersect(children, names(countIDs))
# Condition to end recursion
if (length(children) == 0) {
if (replacement == "no") {
return(as.character(taxon))
} else {
return(rep(as.character(taxon), m))
}
}
childrenCount <- countIDs[as.character(children)]
m_i <- rep.int(0, length(childrenCount))
names(m_i) <- names(childrenCount)
m_i
m
childrenCount
if (method == "balanced") {
while (m > 0 & length(childrenCount[childrenCount > m_i]) <= m) {
child <- names(childrenCount[childrenCount > m_i])
m_i[child] <- m_i[child] + 1
m <- m - length(child)
}
child <- sample(names(childrenCount[childrenCount > m_i]), m)
m_i[child] <- m_i[child] + 1
# m <- 0
} else if (method == "randomized") {
# If we don't have the m fully distributed over m_i (children),
# choose a random child from childrenCount that still has taxa
# available to choose.
while (m > 0 & length(childrenCount[childrenCount > m_i]) > 0) {
child <- sample(names(childrenCount[childrenCount > m_i]), 1)
m_i[child] <- m_i[child] + 1
m <- m - 1
}
}
m_i
requireIDs
m_i
if (!is.null(requireIDs)) {
req <- is.element(names(m_i), names(requireIDs))
toAdd <- m_i[req] < requireIDs[names(m_i[req])]
if (method == "balanced") {
while (any(toAdd)) {
subtract <- m_i[setdiff(names(m_i), names(toAdd))]
subtract <- sample(names(subtract[subtract == max(subtract)]), 1)
m_i[subtract] <- m_i[subtract] - 1
add <- sample(names(toAdd[toAdd == TRUE]), 1)
m_i[add] <- m_i[add] + 1
toAdd <- m_i[req] < requireIDs[names(m_i[req])]
}
} else if (method == "randomized") {
while (any(toAdd)) {
subtract <- m_i[setdiff(names(m_i), names(toAdd))]
subtract <- sample(names(subtract[subtract > 0]), 1)
m_i[subtract] <- m_i[subtract] - 1
add <- sample(names(toAdd[toAdd == TRUE]), 1)
m_i[add] <- m_i[add] + 1
toAdd <- m_i[req] < requireIDs[names(m_i[req])]
}
}
}
m_i
req
toAdd
m_i
requireIDs
m_i
m_i["33090"]
m_i["33090"] <- 0
m_i["2830"]
m_i["2830"] <- 1
m_i
if (!is.null(requireIDs)) {
req <- is.element(names(m_i), names(requireIDs))
toAdd <- m_i[req] < requireIDs[names(m_i[req])]
if (method == "balanced") {
while (any(toAdd)) {
subtract <- m_i[setdiff(names(m_i), names(toAdd))]
subtract <- sample(names(subtract[subtract == max(subtract)]), 1)
m_i[subtract] <- m_i[subtract] - 1
add <- sample(names(toAdd[toAdd == TRUE]), 1)
m_i[add] <- m_i[add] + 1
toAdd <- m_i[req] < requireIDs[names(m_i[req])]
}
} else if (method == "randomized") {
while (any(toAdd)) {
subtract <- m_i[setdiff(names(m_i), names(toAdd))]
subtract <- sample(names(subtract[subtract > 0]), 1)
m_i[subtract] <- m_i[subtract] - 1
add <- sample(names(toAdd[toAdd == TRUE]), 1)
m_i[add] <- m_i[add] + 1
toAdd <- m_i[req] < requireIDs[names(m_i[req])]
}
}
}
m_i
?strict
q()
library("CHNOSZ")
source("TaxonSampling.R")
ls()
outputIDs <- TS_Algorithm(1, 20, nodes1, originalCountIDs)
str(nodes1)
str(nodes2)
system.time(outputIDs <- TS_Algorithm(1, 20, nodes1, originalCountIDs))
system.time(outputIDs <- TS_Algorithm(1, 20, nodes2, originalCountIDs))
?cor
?sweep
q()
ls()
source("TaxonSampling.R")
str(nodes)
str(nodes1)
str(nodes2)
outputIDs <- Wrapper_TS_Algorithm(1, 50, nodes1, countIDs)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 50, nodes1, countIDs))
str(outputIDs)
str(outputIDs)
str(outputIDs)
str(outputIDs)
str(outputIDs)
str(outputIDs)
str(outputIDs)
str(outputIDs)
str(outputIDs)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 50, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 50, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 50, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 50, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 20, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 20, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 100, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 100, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 100, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes1, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes1, countIDs, strict = "yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict = "yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict = "yes"))
q()
ls()
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes2, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes2, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes2, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes2, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes2, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes2, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no"))
str(countIDs)
sort(countIDs)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="randomized"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="randomized"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="randomized"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="randomized"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="randomized"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="randomized"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="randomized"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="randomized"))
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="balanced"))
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="balanced"))
ls()
str(countIDs)
countIDs["45157"]
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="balanced"))
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="balanced"))
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, countIDs, strict="no", method="balanced"))
taxon <- 45157
m <- 2
taxon <- as.integer(taxon)
children <- nodes$id[nodes$parent == taxon & nodes$id != taxon]
children <- intersect(children, names(countIDs))
children
# Condition to end recursion
if (length(children) == 0) {
if (replacement == "no") {
return(as.character(taxon))
} else {
return(rep(as.character(taxon), m))
}
}
childrenCount <- countIDs[as.character(children)]
m_i <- rep.int(0, length(childrenCount))
names(m_i) <- names(childrenCount)
childrenCount
ls()
str(countIDs)
str(originalCountIDs)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes1, originalCountIDs, strict="no", method="balanced"))
ls()
children
idsFile
str(ids)
ids <- ids <- read.table(idsFile, sep = "\t", header = FALSE, comment.char = "",
colClasses = "integer", strip.white = TRUE)
ids <- read.table(idsFile, sep = "\t", header = FALSE, comment.char = "",
colClasses = "integer", strip.white = TRUE)
ids <- ids[, 1]
ids
ignoreIDs
ignoreIDs <- ids
str(nodes)
nodes <- nodes1
str(nodes)
ignoreIDs <- ignoreIDs[is.element(ignoreIDs, nodes$id)]
str(ignoreIDs)
ignoreIDs <- unique(ignoreIDs)
str(ignoreIDs)
for (id in ignoreIDs) {
if (any(is.element(ignoreIDs[ignoreIDs != id],
allparents(id, nodes = nodes)))) {
ignoreIDs <- ignoreIDs[ignoreIDs != id]
}
}
str(ignoreIDs)
q()
ls()
taxon
m
source("CHNOSZ")
source("TaxonSampling.R")
if (m <= 0) {
Print("Error: m less or equal than zero during recursion.\n")
exit(0)
}
# First step: Find the sub-taxa (children nodes) of the current taxon
taxon <- as.integer(taxon)
children <- nodes$id[nodes$parent == taxon & nodes$id != taxon]
children <- intersect(children, names(countIDs))
# Condition to end recursion
if (length(children) == 0) {
if (replacement == "no") {
return(as.character(taxon))
} else {
return(rep(as.character(taxon), m))
}
}
childrenCount <- countIDs[as.character(children)]
m_i <- rep.int(0, length(childrenCount))
names(m_i) <- names(childrenCount)
childrenCount
countIDs["45157"]
countIDs[as.character(taxon)]
countIDs[as.character(taxon)] - sum(childrenCount)
sum(childrenCount)
c(childrenCount, countIDs[as.character(taxon)])
source("TaxonSampling.R")
str(nodes)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs, strict="yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs, strict="yes"))
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs))
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs))
if (m <= 0) {
Print("Error: m less or equal than zero during recursion.\n")
exit(0)
}
# First step: Find the sub-taxa (children nodes) of the current taxon
taxon <- as.integer(taxon)
children <- nodes$id[nodes$parent == taxon & nodes$id != taxon]
children <- intersect(children, names(countIDs))
# Condition to end recursion
if (length(children) == 0) {
if (replacement == "no") {
return(as.character(taxon))
} else {
return(rep(as.character(taxon), m))
}
}
childrenCount <- countIDs[as.character(children)]
m_i <- rep.int(0, length(childrenCount))
names(m_i) <- names(childrenCount)
# For cases when one taxon isn't a leaf node, but is an input ID that should
# be available to sample along its children.
# Example of this case is an input with Homo sapiens (9606),
# H. sapiens neanderthalensis (63221) and H. sapiens ssp. denisova (741158).
if (sum(childrenCount) < countIDs[as.character(taxon)]) {
childrenCount <- c(childrenCount, countIDs[as.character(taxon)])
childrenCount[as.character(taxon)] <- 1
}
childrenCount
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs))
m_i
m_i["280699"]
m_i["280699"] == 0
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs))
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs))
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 150, nodes, countIDs))
outputIDs
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs
is.element("47157", outputIDs)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs
is.element("47157", outputIDs)
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs
is.element("47157", outputIDs)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs
is.element("47157", outputIDs)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs
is.element("47157", outputIDs)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs
is.element("47157", outputIDs)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs
is.element("47157", outputIDs)
system.time(outputIDs2 <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs2
is.element("47157", outputIDs2)
identical(outputIDs, outputIDs2)
setdiff(outputIDs, outputIDs2)
system.time(outputIDs2 <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
outputIDs2
is.element("47157", outputIDs2)
identical(outputIDs, outputIDs2)
setdiff(outputIDs, outputIDs2)
taxon
m
# Sanity check
if (m <= 0) {
Print("Error: m less or equal than zero during recursion.\n")
exit(0)
}
# First step: Find the sub-taxa (children nodes) of the current taxon
taxon <- as.integer(taxon)
children <- nodes$id[nodes$parent == taxon & nodes$id != taxon]
children <- intersect(children, names(countIDs))
# Condition to end recursion
if (length(children) == 0) {
if (replacement == "no") {
return(as.character(taxon))
} else {
return(rep(as.character(taxon), m))
}
}
childrenCount <- countIDs[as.character(children)]
# For cases when one taxon isn't a leaf node, but is an input ID that should
# be available to sample along its children.
# Example of this case is an input with Homo sapiens (9606),
# H. sapiens neanderthalensis (63221) and H. sapiens ssp. denisova (741158).
if (sum(childrenCount) < countIDs[as.character(taxon)]) {
childrenCount <- c(childrenCount, countIDs[as.character(taxon)])
childrenCount[as.character(taxon)] <- 1
}
m_i <- rep.int(0, length(childrenCount))
names(m_i) <- names(childrenCount)
# Allocating m_i to the children taxa at last. Two methods:
# Balanced: allocate ensuring that any two taxa differ by at most 1 if
#           m_i < n_i (or m_i < childrenCount), but allow more if one taxon
#           has m_i == n_i.
# Randomized: if we don't have the m fully distributed over m_i (children),
#             choose a random child from childrenCount that still has taxa
#             available to choose.
if (method == "balanced") {
while (m > 0 & length(childrenCount[childrenCount > m_i]) <= m) {
child <- names(childrenCount[childrenCount > m_i])
m_i[child] <- m_i[child] + 1
m <- m - length(child)
}
child <- sample(names(childrenCount[childrenCount > m_i]), m)
m_i[child] <- m_i[child] + 1
} else if (method == "randomized") {
while (m > 0 & length(childrenCount[childrenCount > m_i]) > 0) {
child <- sample(names(childrenCount[childrenCount > m_i]), 1)
m_i[child] <- m_i[child] + 1
m <- m - 1
}
}
m_i
taxon
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
is.element("45157", outputIDs)
outputIDs
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs, method = "randomized", strict = "no"))
outputIds
outputIDs
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs, method = "randomized", strict = "yes"))
outputIDs
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs, method = "balanced", strict = "yes"))
sample(children, 0)
sample(children, -1)
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs, method = "balanced", strict = "yes"))
source("TaxonSampling.R")
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs, method = "balanced", strict = "yes"))
outputIDs
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs, method = "randomized", strict = "yes"))
outputIDs
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs, replacement = "yes", method = "randomized", strict = "yes"))
outputIDs
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 200, nodes, countIDs, replacement = "yes", method = "randomized", strict = "yes"))
outputIDs
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 100, nodes, countIDs, replacement = "yes", method = "randomized", strict = "yes"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 100, nodes, countIDs, replacement = "yes", method = "randomized", strict = "no"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 300, nodes, countIDs, replacement = "yes", method = "randomized", strict = "no"))
system.time(outputIDs <- Wrapper_TS_Algorithm(1, 400, nodes, countIDs, replacement = "yes", method = "randomized", strict = "no"))
outputIDs
q()
ls()
rm(list=ls())
idsFile <- "data/COI.ids"
multifasta <- "data/COI.fasta"
taxondir <- "taxdump/"
m <- 500
method <- "diversity"
randomize <- "yes"
replacement <- "no"
ignoreIDs <- NULL
requireIDs <- NULL
ignoreNonLeafID <- NULL
outFile <- "output.fasta"
source("TaxonSampling.R")
library(CHNOSZ)
source("TaxonSampling.R")
source("TaxonSampling.R")
source("TaxonSampling.R")
nodes <- suppressMessages(getnodes(taxondir))
countIDs <- TS_TaxonomyData(idsFile, nodes)
nodes
idsFile
